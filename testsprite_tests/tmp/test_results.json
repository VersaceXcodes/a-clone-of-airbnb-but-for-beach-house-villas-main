[
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "1d318738-8c17-46b2-ae5f-336212242984",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC001-User Signup Success",
    "description": "Verify that a new user can successfully sign up as guest or host with valid inputs and receives a JWT token.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or links to the signup page, possibly by scrolling or checking for hidden elements.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The signup page and main page failed to load, showing a chrome error page. Unable to proceed with signup or verify JWT token issuance. Task cannot be completed due to page load failure.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/index.css?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/AppWrapper.tsx?t=1753105442783:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108393605125//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.185Z",
    "modified": "2025-07-21T14:33:13.727Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "037ceace-b37e-47da-abaf-1566dcecb683",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC002-User Login Success and Failure",
    "description": "Verify login functionality with correct and incorrect credentials for guests and hosts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or login link/button to go to the login page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The login page failed to load due to a browser error. Unable to verify login functionality with correct and incorrect credentials for guests and hosts. Please check the server or URL and try again.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/index.css?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/AppWrapper.tsx?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-WOOG5QLI.js?v=0e4dc9c4:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108403459726//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.196Z",
    "modified": "2025-07-21T14:33:23.576Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "8df6fcb2-6a64-4770-9fed-6f64107fd888",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC003-Password Reset Flow",
    "description": "Verify the password reset process including request, code verification, and setting new password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or links to access the password reset request page or try scrolling to reveal hidden elements.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test failed: Password reset process did not complete as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The password reset process testing cannot proceed because the password reset request page is not accessible. The browser shows an error page with no content or interactive elements. Please verify the server and URL availability.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/index.css?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108401598383//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.208Z",
    "modified": "2025-07-21T14:33:21.720Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "82e4e952-0e87-42da-a348-8c7a7788aac1",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC004-Villa Browsing and Search Filters",
    "description": "Verify browsing villas without login and applying multiple search filters including location, price, amenities.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or links to access the villas listing page or try scrolling or waiting for content to load.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Assert villas are listed with multimedia and key information\n        villas = await page.query_selector_all('.villa-card')\n        assert len(villas) > 0, 'No villas found on the listing page'\n        for villa in villas:\n            # Check multimedia presence (image or video)\n            multimedia = await villa.query_selector('.multimedia')\n            assert multimedia is not None, 'Villa multimedia not found'\n            # Check key information presence (title, price, location)\n            title = await villa.query_selector('.villa-title')\n            price = await villa.query_selector('.villa-price')\n            location = await villa.query_selector('.villa-location')\n            assert title is not None and price is not None and location is not None, 'Key villa information missing'\n        # After applying location filter, verify villas match location criteria\n        filtered_villas = await page.query_selector_all('.villa-card')\n        assert len(filtered_villas) > 0, 'No villas found after applying location filter'\n        for villa in filtered_villas:\n            loc_text = await (await villa.query_selector('.villa-location')).inner_text()\n            assert 'Expected Location' in loc_text, f'Villa location {loc_text} does not match filter'\n        # After applying price range filter, verify villas meet price constraints\n        filtered_villas = await page.query_selector_all('.villa-card')\n        assert len(filtered_villas) > 0, 'No villas found after applying price filter'\n        for villa in filtered_villas:\n            price_text = await (await villa.query_selector('.villa-price')).inner_text()\n            price_value = float(price_text.replace('$','').replace(',',''))\n            assert 100 <= price_value <= 500, f'Villa price {price_value} out of range'\n        # After applying amenities filter, verify villas have selected amenities\n        filtered_villas = await page.query_selector_all('.villa-card')\n        assert len(filtered_villas) > 0, 'No villas found after applying amenities filter'\n        for villa in filtered_villas:\n            amenities = await villa.query_selector_all('.amenity')\n            amenity_texts = [await (await amenity.get_property('textContent')).json_value() for amenity in amenities]\n            assert 'Pool' in amenity_texts, 'Villa missing required amenity: Pool'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/175310840775274//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.214Z",
    "modified": "2025-07-21T14:33:27.855Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "bd19d63b-dff7-4807-9cb8-d451fda41e8f",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC005-Host Villa Onboarding Wizard Complete Flow",
    "description": "Verify that a host can complete the villa onboarding wizard including adding photos, amenities, rules, calendar, and pricing overrides.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or start buttons to begin the villa onboarding wizard or try to refresh or interact to reveal the wizard steps.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        # Navigate to the host login page or dashboard to start the villa onboarding wizard from a valid entry point.\n        await page.goto('http://localhost:5175/login', timeout=10000)\n        \n\n        # Click on 'Return to Homepage' link to navigate back to the homepage and try to find a valid entry point for host login or villa onboarding wizard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Login' link to authenticate as a host and access the villa onboarding wizard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input host email and password, then click the 'Sign in' button to authenticate and proceed to the villa onboarding wizard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('host@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('HostPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Forgot password?' link to attempt password recovery or reset to gain access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input the host email address into the email field and click 'Send reset email' to initiate password reset process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('host@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Back to Login' link to return to the login page and attempt login again or try alternative access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input the host email and a new password (if known) or try a default password to attempt login again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('host@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('NewHostPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign up' link to create a new host account and attempt onboarding wizard access through new credentials.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the sign-up form with display name, email, password, agree to terms, and submit to create a new host account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Host')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testhost@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestHostPass123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[5]/label/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input the new host email 'testhost@example.com' and password 'TestHostPass123' and click 'Sign in' to authenticate and proceed to the villa onboarding wizard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testhost@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestHostPass123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The host was able to create a new account and log in successfully. However, the villa onboarding wizard steps including adding photos, amenities, rules, calendar, and pricing overrides were not completed or verified due to time constraints and navigation issues. The task is not fully finished.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://picsum.photos/600/400?grayscale&blur=2:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fonts.gstatic.com/s/inter/v19/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa1ZL7.woff2:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/popular-locations:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://picsum.photos/seed/beachhero/1600/700:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://picsum.photos/seed/v_003main/800:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://picsum.photos/seed/v_002main/800:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://picsum.photos/seed/v_001main/800:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/popular-locations:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/auth/login:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/auth/login:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/account/notifications:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/account/notifications:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108725045572//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.224Z",
    "modified": "2025-07-21T14:38:45.235Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "73258b2c-18de-4dc1-b07a-18b9a44c7802",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC006-Villa CRUD Operations by Host",
    "description": "Verify that hosts can create, read, update, and delete their villas with proper authentication and authorization.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click on the login button or link to login as host.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find any navigation or menu elements by scrolling or other means to locate login or host access.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The application page failed to load, resulting in a browser error page with no interactive elements. Unable to proceed with the test steps for verifying host CRUD operations on villas. Please ensure the application server is running and accessible at the expected URL, then restart the test.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108410802393//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.231Z",
    "modified": "2025-07-21T14:33:30.911Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "52b21524-f51a-44fe-ad6e-e76c5b68aba3",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC007-Booking Process Including Availability and Price Validation",
    "description": "Verify that guests can make bookings validating availability, correct total price calculation including pricing overrides, and booking status changes.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on Login to proceed as guest.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input guest email and password, then click Sign in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('guest@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('guestpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Look for option to continue as guest without login or sign up, or navigate back to homepage to start booking as guest.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the first featured villa 'Lagoon Hideaway' to open its booking page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/section/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Back to Home' button to return to homepage and try another villa or alternative approach.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the second featured villa 'Surfside Cottage' to open its booking page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/section/div[2]/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Go back to homepage to try alternative villa or booking approach.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the third featured villa 'Casa del Mar' to open its booking page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/section/div[2]/div/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to homepage to try alternative villa or booking approach or report issue if no villas load properly.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Search for villas in Malibu using the search bar to find available villas and open booking page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Malibu')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/input[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('2025-08-01')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/input[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('2025-08-05')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/input[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('2')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Surfside Cottage' villa link to open its booking page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[3]/div/div[2]/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to homepage to try alternative villa or booking approach or report issue if no villas load properly.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to complete booking flow test as villa details pages do not load, blocking date selection, price validation, and booking confirmation. Reported issue for developer attention.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/featured:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fonts.gstatic.com/s/inter/v19/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa1ZL7.woff2:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fastly.picsum.photos/id/495/1600/700.jpg?hmac=D_CdX8c5bJGB63N0D5sDnk8H4F48tGmWs15AcjH-AK4:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/auth/login:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003/calendar:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003/amenities:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003/pricing-overrides:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003/photos:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/v_003/rules:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/reviews?page=1:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/calendar:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/photos:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/rules:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/amenities:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/villas/v_003/pricing-overrides:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/175310876514725//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.241Z",
    "modified": "2025-07-21T14:39:25.326Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "2112f2c4-086d-4f20-9019-eb5418ef4c25",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC008-Host Booking Approval, Rejection, and Cancellation",
    "description": "Verify hosts can approve, reject, or cancel bookings with proper state updates and real-time notifications to guests.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108364427663//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.257Z",
    "modified": "2025-07-21T14:32:44.548Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "0f96dcaa-37a9-40a9-a01b-e04fb1609a49",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC009-Real-time Messaging System",
    "description": "Verify real-time messaging between guests and hosts including message sending, thread creation, unread counts, and websocket notifications.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click login or guest login to proceed to messaging inbox.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The messaging application is currently not accessible at the expected URL (localhost:5175). Unable to proceed with the verification of real-time messaging features including login, message sending, thread creation, unread counts, and websocket notifications. Please ensure the server is running and accessible, then retry the test.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/AppWrapper.tsx?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108413193285//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.265Z",
    "modified": "2025-07-21T14:33:33.343Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "963cefd2-144e-4071-ac98-3b767f200825",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC010-Review System Bidirectional CRUD",
    "description": "Verify guests and hosts can create, edit, view, and delete reviews for stays with ratings and text.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or login elements by scrolling or refreshing to find login as guest.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed because the main page is not loading and results in a browser error page. Please check the server or URL and try again.\nBrowser Console Logs:\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/index.css?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-WOOG5QLI.js?v=0e4dc9c4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/App.tsx?t=1753105442783:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108403328715//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.273Z",
    "modified": "2025-07-21T14:33:23.471Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "cd2007a5-57b9-4eb3-9472-97d74cab6e09",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC011-Wishlist CRUD and Multi-list Support",
    "description": "Verify users can create multiple wishlists, add and remove villas from each, and update or delete wishlists.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or login elements by scrolling or refreshing to find login or wishlist creation options.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The website failed to load properly, showing a browser error page. No further testing can be performed. Task stopped.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108393939572//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.281Z",
    "modified": "2025-07-21T14:33:14.044Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "91466c10-64d0-47d2-9452-1f0f12de9f30",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC012-Dashboard Views for Guests and Hosts",
    "description": "Verify that personalized dashboards display relevant data for reservations, profile editing, revenue summary, and notifications for both guests and hosts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click login or navigation element to start guest login process.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to navigate to login page or find any clickable elements or links to proceed with guest login.\n        await page.goto('http://localhost:5175/login', timeout=10000)\n        \n\n        # Try to reload the page or navigate to home to find login or dashboard access.\n        await page.goto('http://localhost:5175/home', timeout=10000)\n        \n\n        # Try clicking 'Return to Homepage' link to see if it redirects to a valid page with login or dashboard access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Login' link to start the guest login process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input guest email and password, then click 'Sign in' to login as guest.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('guest@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('guestpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign up' link to create a new guest account for testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the sign-up form with valid guest details and submit the form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Guest')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testguest@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('guestpass123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[5]/label/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Reported critical issues blocking the task: guest account creation fails, login attempts fail, and notifications cannot be retrieved. Cannot proceed with verifying personalized dashboards without resolving these issues.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/main.tsx?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/index.css?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/src/AppWrapper.tsx?t=1753105442783:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/node_modules/.vite/deps/chunk-QCHXOAYK.js?v=0e4dc9c4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5175/?token=eFGzfe4Q0woR' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5175/@vite/client:535:0)\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:5175/node_modules/.vite/deps/react-router-dom.js?v=0e4dc9c4:4392:12)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://fastly.picsum.photos/id/606/600/400.jpg?blur=2&grayscale&hmac=uCVOyZ8ICmVa56RO7CARU2AfcBmSKqwDCXtzYGe0JMo:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/featured:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/villas/popular-locations:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/auth/login:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/account/notifications:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108601694127//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.288Z",
    "modified": "2025-07-21T14:36:41.883Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "7a4b71a4-eb80-4c7e-9d1a-b9f6451106be",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC013-REST API Resource Ownership and Authorization",
    "description": "Verify all API endpoints enforce resource ownership and JWT-based authorization for all applicable operations.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108363610901//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.296Z",
    "modified": "2025-07-21T14:32:43.722Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "725e4da8-771f-414e-94f7-5ef9aa9d2597",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC014-Input Validation and Schema Enforcement",
    "description": "Verify all inputs to API endpoints and UI forms are validated according to Zod schemas, rejecting invalid or missing data properly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: validation checks did not pass as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108364125131//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.303Z",
    "modified": "2025-07-21T14:32:44.251Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "33e3cd43-6d0f-4104-8876-e745b86d4fb4",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC015-UI Route Access Control and State Rendering",
    "description": "Verify UI routes render correctly according to user authentication and role states, including redirects for unauthorized access.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108364408499//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.311Z",
    "modified": "2025-07-21T14:32:44.546Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "a2a409eb-5966-4e48-9a6f-3ad009222fd3",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC016-Error Pages and Fallback UI",
    "description": "Verify that 404 pages appear for invalid routes and fallback UI handles unexpected errors gracefully.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108363505594//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.324Z",
    "modified": "2025-07-21T14:32:43.648Z"
  },
  {
    "projectId": "aa23a123-1899-4b45-8f1e-e2b40268096b",
    "testId": "06a14af4-0352-4a91-9553-743e09b64cb0",
    "userId": "847844f8-80e1-7077-17ef-8f8acc9fc07a",
    "title": "TC017-Real-time Notification Updates and Read/Unread States",
    "description": "Verify real-time notification updates for bookings, messages, and system events with correct unread counts and marking as read functionality.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5175\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: net::ERR_EMPTY_RESPONSE at http://localhost:5175/\nCall log:\n  - navigating to \"http://localhost:5175/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/847844f8-80e1-7077-17ef-8f8acc9fc07a/1753108363627588//tmp/test_task/result.webm",
    "created": "2025-07-21T14:32:15.331Z",
    "modified": "2025-07-21T14:32:43.746Z"
  }
]
