_updated: 1752865784350
_processing: false
key: pm.brd
data: >-
  # Backend Requirements Document (BRD) — BeachStay Villas


  ---


  ## I. General, Personas, Features


  ### I.A. Purpose & Personas


  The backend will power all user-facing data operations for **BeachStay
  Villas**, a web application facilitating booking, listing, messaging, reviews,
  and account management for beach villa stays. It will handle all resource
  state management, transactions, filtration, calendar logic, and
  synchronous/asynchronous messaging.


  **Personas:**


  - **Guest/Seeker:** Browses/searches, books stays, manages trips, reviews,
  profiles, wishlists, and messages.

  - **Host/Owner:** Lists and manages villas, controls calendars/pricing,
  manages reservations, reviews guests, communicates with potential/current
  guests, tracks superhost status.

  - **Visitor:** Read-only browsing; unauthenticated public endpoints.

  - (Internal admin is out-of-scope for now.)


  **Features (mapped from PRD/FRD):**


  - Authentication & profile/account CRUD

  - Villa browsing, search, filtration, summary/detail views

  - Villa creation/editing (host)

  - Availability/calendar management

  - Pricing and override logic

  - Booking flow: inquiry, instant book, payment simulation, change request,
  cancel, view

  - Reservations management (guest/host)

  - Wishlists (CRUD, multi-list, multi-villa, heart/save)

  - Inbox/messaging (threads, unread, real-time updates)

  - Reviews (write/edit/view, guest ↔ host)

  - Notifications (in-app & email triggers)

  - Superhost status (auto badge)

  - Static/utility endpoints (footer/ToS/health, etc.)


  ---


  ## II. REST API


  ### II.A. Justification & Reasoning


  A REST API is essential for BeachStay Villas due to:


  - **Resource-CRUD Logic**: Villas, bookings, users, reviews, and wishlists are
  inherently resource-driven and align with RESTful design.

  - **Stateless Calls**: All flows—browsing, search, updates,
  dashboarding—require stateless, repeatable DB operations.

  - **Complex Queryability**: Search endpoints (villas, bookings, messages) need
  parameter-based filtration, sorting, and pagination—natively suited to RESTful
  APIs.

  - **Broad Client Support**: REST supports web, mobile, and future API
  consumers.

  - **DB/Backend-centric**: Direct mapping to existing SQL (Postgres) schemas
  and expected Zod-type schemas, with IDs/datetimes generated by backend as
  required.


  **Foundational Relationships:**

  - Backend generates all IDs (e.g., `villa_id`, `booking_id`).

  - Backend enforces foreign key relations, state transitions (e.g., bookings,
  messaging).

  - Data primitives (dates, strings, booleans, numerics) match between API and
  DB design.


  ### II.B. API Endpoints


  #### 1. Authentication & Account


  ###### /auth/signup [POST]


  - **Description**: Registers a user with email, password, display_name.
  Returns JWT on success.

  - **DB Interaction**: Inserts into `users` table. Populates `user_id` (string,
  backend-generated), stores `password_hash`, `display_name`, `created_at`,
  `updated_at` (backend-generated datetimes).

  - **External APIs**: None (email sending can be simulated/stubbed).

  - **Auth**: N/A (public).

  - **Request**: application/json (fields per schema).

  - **Response**: JWT, user_id, user summary data.

  - **Notes**: Validates email uniqueness.


  ###### /auth/login [POST]


  - **Description**: Authenticates user, returns JWT.

  - **DB Interaction**: Looks up `users` by email, checks `password_hash`.

  - **External APIs**: None.

  - **Auth**: N/A (public).

  - **Request/Response**: As above.


  ###### /auth/password/request-reset [POST]


  - **Description**: Requests password reset; emits reset code (writes to
  `password_resets`).

  - **DB Interaction**: Inserts row into `password_resets`—backend to generate
  `password_reset_id`, `reset_code`, and expiry.

  - **External APIs**: In real app, email delivery provider; stubbed here.

  - **Auth**: Not required.

  - **Request/Response**: Standard.


  ###### /auth/password/reset [POST]


  - **Description**: Sets new password if reset code valid.

  - **DB Interaction**: Looks up `password_resets` by code, sets `used=true`,
  updates `users.password_hash`.

  - **External APIs**: None.

  - **Auth**: Not required.


  ###### /account/me [GET, PATCH]


  - **Description**: Fetches or updates current user profile.

  - **DB Interaction**: Reads/updates from/to `users` row by JWT-provided
  `user_id`.

  - **Auth**: Yes.


  #### 2. Villas — Browse, Details, Host CRUD


  ###### /villas [GET]


  - **Description**: Search/browse villa summaries by filters, like city, dates,
  guest count, amenities.

  - **DB Interaction**: Joins `villas` (and related subschemas: amenities,
  photos, reviews). Returns list of summaries (`villa_id`, prices, avail, etc.).
  Applies all query params for filtering.

  - **Complexity**: Calculating instant availability for date filters requires
  cross-checking against `villa_calendar` (+ override logic) and booked dates in
  `bookings`. Sorting/pagination applied.

  - **Auth**: Not required.

  - **Response**: List of villa summaries with review aggregations (uses data
  from `user_reviews`).


  ###### /villas/featured [GET], /villas/popular-locations [GET]


  - **Description**: Returns homepage cards.

  - **DB Interaction**: Reads from `villas` (flags for featured), or aggregates
  on address fields.

  - **Auth**: No.


  ###### /villa/{villa_id} [GET, PATCH]


  - **Description**: Fetches, or (host) updates all details (for backend edit
  flow).

  - **DB Interaction**: Reads/updates from `villas`, links out to
  `villa_photos`, `villa_amenities`, `villa_rules`, etc.

  - **Update**: Checks/sets `updated_at`, applies deep merge as per PATCH body.

  - **Auth**: GET (no), PATCH (host’s JWT required, checks ownership).


  ###### /villa/{villa_id}/photos [GET]


  - **Description**: Villa gallery.

  - **DB Interaction**: Reads all `villa_photos` for villa.

  - **Auth**: No.


  ###### /villa/{villa_id}/amenities [GET]


  - **Description**: Matrix of features shown in villa detail.

  - **DB Interaction**: Joins `villa_amenities` with `amenities` master.

  - **Auth**: No.


  ###### /villa/{villa_id}/rules [GET]


  - **Description**: House rules for villa.

  - **DB Interaction**: Reads from `villa_rules`.

  - **Auth**: No.


  ###### /villa/{villa_id}/calendar [GET, PATCH]


  - **Description**:
      - GET: Returns all special blocks for villa (booked, blocked, maintenance).
      - PATCH (host): Updates calendar blocks/availability.
  - **DB Interaction**:
      - GET: Reads from `villa_calendar` for villa_id.
      - PATCH: Upserts or updates `villa_calendar` entries. Sets `updated_at`.
  - **Relationship**: Important for booking prevention. Calendar table = one row
  per (villa_id, date).

  - **Auth**: PATCH (host only).


  ###### /villa/{villa_id}/pricing-overrides [GET, PATCH]


  - **Description**:
      - GET: Fetches all special pricing (per-day).
      - PATCH (host): Updates/creates per-date price overrides for villa.
  - **DB Interaction**:
      - Reads/writes in `villa_pricing_overrides`.
  - **Auth**: PATCH (host only).


  ###### /villas/amenities [GET]


  - **Description**: Lists all amenity options.

  - **DB Interaction**: Reads from `amenities` master.

  - **Auth**: No.


  ###### /host/villas [GET, POST]


  - **Description**:
      - GET: Lists all current user's villas (as host). Host dashboard.
      - POST: Create new villa via “listing wizard.”
  - **DB Interaction**: 
      - GET: Reads all `villas` where `owner_user_id` = JWT user.
      - POST: Inserts into `villas` with all inputs; also populates subsidiary tables (`villa_photos`, `villa_amenities`, `villa_rules` as needed).
      - Backend creates required IDs and audit fields (`villa_id`, timestamps).
  - **Auth**: Yes (host).


  #### 3. Bookings & Reservation Management


  ###### /villas/{villa_id}/booking/preview [POST]


  - **Description**: Simulate total price & check availability for villa and
  dates.

  - **DB Interaction**: Confirms dates available via `villa_calendar` (and
  checks existing `bookings` for overlap and blocked status). Calculates total
  using price, fees, taxes (joins with `villa_pricing_overrides` if within
  override dates).

  - **Response**: JSON with avail+price details.

  - **Auth**: No (public, for UI/checkout).


  ###### /villas/{villa_id}/booking [POST]


  - **Description**: Requests/creates (or instant-books) a booking.

  - **DB Interaction**: 
      - Checks for date availability (against `villa_calendar`, existing bookings).
      - Inserts row into `bookings` (backend generates booking_id, sets dates/prices/status), populates `booking_guests` if additional guest info provided.
      - Adds entry to `booking_histories` for ‘requested’ or auto-‘confirmed’ flow.
  - **Auth**: Yes. If instant book, set status to confirmed; else, status
  pending/requested.


  ###### /bookings/{booking_id} [GET, PATCH, DELETE]


  - **GET**: Fetches all booking details for guest/host, including guest
  details, price, and status.
      - Reads from `bookings` (+ links to guests/payments if needed).
  - **PATCH**: Allows *owner or guest* to modify date/guests (status moves to
  “modified,” triggers message to other party).
      - Updates `bookings`, adds row to `booking_histories`.
  - **DELETE (Cancel)**: Allows guest or host to cancel booking (status to
  ‘cancelled’, logs time, triggers notifications).

  - **Auth**: Yes, must be party to booking or host.


  ###### /account/my_trips [GET]


  - **Description**: Dashboard for all bookings as guest, separated into
  categories.

  - **DB Interaction**: Fetches all `bookings` where `guest_user_id` = JWT user.

  - **Auth**: Yes.


  ###### /host/reservations [GET]


  - **Description**: Host dashboard—reservations for all their villas.

  - **DB Interaction**: Fetches all `bookings` where `host_user_id` = JWT user.

  - **Auth**: Yes.


  ###### /host/reservations/{booking_id}/status [PATCH]


  - **Description**: Allows host to approve/reject/cancel pending bookings.

  - **DB Interaction**: Updates row in `bookings`, logs to `booking_histories`.

  - **Auth**: Host only.


  #### 4. Wishlists


  ###### /account/wishlists [GET, POST]


  - **GET**: Lists all wishlists for current user (with villa refs).
      - Reads from `villa_wishlists` + joined `wishlist_items` for villa ids.
  - **POST**: Creates new wishlist. Backend generates id, timestamps.
      - Inserts into `villa_wishlists` (with `user_id` linked to JWT).
  - **Auth**: Yes.


  ###### /account/wishlists/{wishlist_id} [PATCH, DELETE]


  - **PATCH**: Edits wishlist name/status.
      - Updates row in `villa_wishlists`.
  - **DELETE**: Marks wishlist as deleted (`is_deleted=true`).

  - **Auth**: Yes.


  ###### /account/wishlists/{wishlist_id}/villas/{villa_id} [PUT, DELETE]


  - **PUT**: Adds a villa to wishlist.
      - Inserts into `wishlist_items`.
  - **DELETE**: Removes villa from wishlist.
      - Deletes row from `wishlist_items`.
  - **Auth**: Yes.


  #### 5. Messaging & Inbox


  ###### /inbox [GET]


  - **Description**: List all message threads for a user.

  - **DB Interaction**: Reads from `message_threads` (by `participant_user_id` =
  JWT user).

  - **Auth**: Yes.


  ###### /inbox/{thread_id} [GET, POST]


  - **GET**: Reads messages in thread (`messages` where `thread_id`).

  - **POST**: Sends message into thread. Backend generates `message_id`, sets
  `is_read=false` for recipient, updates thread’s `last_message_preview`,
  `updated_at`, and increments `unread_count` for the recipient.

  - **Interaction**: Also triggers websocket event for live delivery.

  - **Auth**: Yes.


  ###### /villa/{villa_id}/contact-host [POST]


  - **Description**: Opens a thread or updates existing regarding a pre-booking
  villa inquiry (maps to a virtual booking, if not present).

  - **DB**: If thread exists, append; else, create new `message_threads` row for
  this (guest, host, villa).

  - **Auth**: Yes.


  #### 6. Reviews


  ###### /villas/{villa_id}/reviews [GET]


  - **Description**: Lists all public (guest→villa/host) reviews, includes
  rating aggregations.

  - **DB Interaction**: Reads from `user_reviews` joined by `villa_id`,
  calculates average ratings and counts.

  - **Auth**: No.


  ###### /account/my_reviews [GET]


  - **Description**: Lists all reviews current user has written as a guest.

  - **DB Interaction**: Reads from `user_reviews` where `guest_user_id` = JWT
  user.

  - **Auth**: Yes.


  ###### /host/villas/{villa_id}/guest-reviews [GET]


  - **Description**: Lists all guest reviews written by the host for that villa.

  - **DB**: Reads from `guest_reviews` by `host_user_id` and `villa_id`.

  - **Auth**: Host.


  ###### /booking/{booking_id}/review [POST]


  - **Description**: Submit review (guest→villa or host→guest) after stay.

  - **DB Interaction**: Inserts into `user_reviews` or `guest_reviews` as
  applicable. Restricts to appropriate procedural windows (e.g., completed
  bookings, not yet reviewed by user, within edit window).

  - **Auth**: Party to booking (guest or host).


  ###### /review/{review_id} [PATCH, DELETE]


  - **PATCH**: Edit review text/rating (if within allowed window).
      - Updates `user_reviews` or `guest_reviews` as permitted.
  - **DELETE**: Soft-deletes review (if permitted).
      - Sets row inactive or deletes.

  #### 7. Notifications


  ###### /account/notifications [GET]


  - **Description**: Lists notifications for user.

  - **DB**: Reads from `notifications` table by user_id, paginated.

  - **Auth**: Yes.


  ###### /account/notifications/{notification_id}/read [POST]


  - **Description**: Marks notification as read.

  - **DB**: Updates `is_read` field in notifications table.

  - **Auth**: Yes.


  ###### /account/notifications/unread_count [GET]


  - **Description**: Returns integer count of unread notifications.

  - **DB**: Counts unread in `notifications`.

  - **Auth**: Yes.


  #### 8. Superhost Status


  ###### /account/superhost [GET]


  - **Description**: Fetches superhost status flag for current user.

  - **DB**: Reads flags/aggregates from `users`, optionally looks up
  `superhost_history`.

  - **Auth**: Yes.


  #### 9. Static/Legal/Utility


  - **Info pages:** `/info/{policy_slug}` returns legal/policy copy. DB as
  single key/value or static content file; no dynamic logic.

  - **Search suggestions:** `/search/suggestions` returns location or villa
  autocomplete. Uses existing indexed villa address/title fields for lookup.

  - **API health:** `/health` always returns status string.


  ---


  ## III. Realtime Websockets


  ### III.A. Justification & Reasoning


  Real-time communication is **required** for:


  - **Inbox Messaging:** Instant delivery and notification of new text messages
  between host and guest (pre- and post-booking), reflecting new unread badges,
  updating UI immediately.

  - **Booking and Notification Alerts:** (optional) For instant feedback—booking
  confirm/cancel, new messages, etc.


  The use of websocket channels allows for room-based routing (e.g., per-user or
  per-thread), and for multiple tabs/devices.


  ### III.B. Events


  #### 1. Messaging Events


  - **message_new**
    - **When:** New message sent in a thread.
    - **Description:** Push to recipient and all open clients for that user; includes thread_id, message content, sender info, timestamps.
    - **DB Interaction**: After `/inbox/{thread_id}` POST, backend creates new row in `messages`, increments `unread_count` in `message_threads`, updates `last_message_preview`, writes `sent_at`. Then, pushes event to websocket clients of recipient.
    - **Notes:** Backend generates all necessary IDs/timestamps using the same logic as REST.
    - **Data**: Auth required (user is part of thread).

  - **thread_unread_update**
    - **When:** When message is read (processed by `/inbox/{thread_id}?mark_read`) or new message arrives.
    - **Description:** Pushes new unread count for a thread for the user; keeps UI badges in sync.
    - **DB Interaction**: Updates `is_read` in `messages`, sets `unread_count` in `message_threads`.
    - **Data**: Includes thread_id, unread_count.

  #### 2. Booking & Notification Events


  - **notification_new**
    - **When:** New notification created for user (e.g., booking confirmed, cancelled, new message).
    - **Description:** Pushed immediately to user (appears as toast/banner/count reset).
    - **DB Interaction**: After new row inserted in `notifications`, event is pushed to user's sockets.
    - **Data**: Contains notification_id, type, message, relevant reference_id.

  ---


  ## IV. Additional Notes


  - **Backend ID Generation**: All resource IDs (PKs) are expected to be
  generated at the backend, as the database does not autogenerate any; this
  ensures uniqueness and consistency, and should be handled synchronously in
  request handlers.

  - **Timestamps**: Likewise, all datetime fields (`created_at`, `updated_at`,
  etc.) are assigned by backend (using ISO8601 format), aligning both REST and
  DB state.

  - **Authorization**: Endpoints requiring auth rely solely on JWT; the backend
  must verify token and, where resource ownership is required (e.g., host owning
  a villa before edit), confirm authorization at the DB (cross-check user IDs on
  target resources).

  - **Data Validations**: All create/update endpoints must validate schema per
  submitted object, as defined in zod schemas. In mock/prototype, only soft
  enforcement; no rate limiting or advanced security needed.

  - **Deep Entity Operations**: Some flows (e.g., villa creation) involve
  multiple table writes: villa details, amenities, rules, photos, calendar—all
  will be written atomically by the backend at creation/update time, ensuring no
  half-finished listings.

  - **Notifications**: Both persistent (`notifications` table) and ephemeral
  (websocket events) are supported; frontend to poll (REST) or subscribe
  (websockets) as desired.

  - **Real-time Messaging**: Only simple text messages are supported as per MVP
  (no files/photos via messaging).

  - **Feature Expansion**: The schema and API contracts are forward-compatible
  for future features (e.g., payouts, admin).


  ---


  ## Summary


  This backend requirements analysis ensures **100% congruence** between the
  API, DB, and persona-driven functional needs. All data interactions—creation,
  state changes, atomicity, cross-table relations, and real-time flows—are
  detailed with strict mapping to schema contracts. The REST API and realtime
  (websocket) events together cover every flow described in the PRD/FRD,
  allowing frontend and client development to proceed confidently for a robust,
  user-focused MVP.


  ---
